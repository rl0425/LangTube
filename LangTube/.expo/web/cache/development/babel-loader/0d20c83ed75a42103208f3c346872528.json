{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { fetchApi } from \"../service/api\";\nexport var createUser = function createUser(payload) {\n  return function _callee(dispatch) {\n    var response;\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            dispatch({\n              type: \"CREATE_USER_LOADING\"\n            });\n            _context.next = 4;\n            return _regeneratorRuntime.awrap(fetchApi(\"/user/create\", \"POST\", payload, 200));\n\n          case 4:\n            response = _context.sent;\n\n            if (!response.success) {\n              _context.next = 12;\n              break;\n            }\n\n            dispatch({\n              type: \"CREATE_USER_SUCCESS\"\n            });\n            dispatch({\n              type: \"AUTH_USER_SUCCESS\",\n              token: response.token\n            });\n            dispatch({\n              type: \"GET_USER_SUCCESS\",\n              payload: response.responseBody\n            });\n            return _context.abrupt(\"return\", response);\n\n          case 12:\n            throw response;\n\n          case 13:\n            _context.next = 19;\n            break;\n\n          case 15:\n            _context.prev = 15;\n            _context.t0 = _context[\"catch\"](0);\n            dispatch({\n              type: \"CREATE_USER_FAIL\",\n              payload: _context.t0.responseBody\n            });\n            return _context.abrupt(\"return\", _context.t0);\n\n          case 19:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 15]], Promise);\n  };\n};\nexport var loginUser = function loginUser(payload) {\n  return function _callee2(dispatch) {\n    var response;\n    return _regeneratorRuntime.async(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.prev = 0;\n            dispatch({\n              type: \"LOGIN_USER_LOADING\"\n            });\n            _context2.next = 4;\n            return _regeneratorRuntime.awrap(fetchApi(\"/user/login\", \"POST\", payload, 200));\n\n          case 4:\n            response = _context2.sent;\n\n            if (!response.success) {\n              _context2.next = 12;\n              break;\n            }\n\n            dispatch({\n              type: \"LOGIN_USER_SUCCESS\"\n            });\n            dispatch({\n              type: \"AUTH_USER_SUCCESS\",\n              token: response.token\n            });\n            dispatch({\n              type: \"GET_USER_SUCCESS\",\n              payload: response.responseBody\n            });\n            return _context2.abrupt(\"return\", response);\n\n          case 12:\n            throw response;\n\n          case 13:\n            _context2.next = 19;\n            break;\n\n          case 15:\n            _context2.prev = 15;\n            _context2.t0 = _context2[\"catch\"](0);\n            dispatch({\n              type: \"LOGIN_USER_FAIL\",\n              payload: _context2.t0.responseBody\n            });\n            return _context2.abrupt(\"return\", _context2.t0);\n\n          case 19:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, [[0, 15]], Promise);\n  };\n};\nexport var logoutUser = function logoutUser() {\n  return function _callee3(dispatch, getState) {\n    var state, token, response;\n    return _regeneratorRuntime.async(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            state = getState();\n            _context3.prev = 1;\n            token = state.authReducer.authData.token;\n            _context3.next = 5;\n            return _regeneratorRuntime.awrap(fetchApi(\"/user/logout\", \"DELETE\", null, 200, token));\n\n          case 5:\n            response = _context3.sent;\n            console.log(response);\n            dispatch({\n              type: \"USER_LOGGED_OUT_SUCCESS\"\n            });\n            _context3.next = 13;\n            break;\n\n          case 10:\n            _context3.prev = 10;\n            _context3.t0 = _context3[\"catch\"](1);\n            console.log(_context3.t0);\n\n          case 13:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, [[1, 10]], Promise);\n  };\n};","map":{"version":3,"sources":["C:/Users/parkgichan/Desktop/자기소개서/langtube/Rangtube/source/actions/auth.actions.js"],"names":["fetchApi","createUser","payload","dispatch","type","response","success","token","responseBody","loginUser","logoutUser","getState","state","authReducer","authData","console","log"],"mappings":"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","sourcesContent":["import { fetchApi } from \"../service/api\";\r\n\r\n/** 회원가입 동작을 서버와 통신 */\r\nexport const createUser = (payload) => {\r\n    return async (dispatch) => {\r\n        try {\r\n            dispatch({\r\n                type: \"CREATE_USER_LOADING\"\r\n            });\r\n            const response = await fetchApi(\"/user/create\", \"POST\", payload, 200);\r\n\r\n            if (response.success) {\r\n                dispatch({\r\n                    type: \"CREATE_USER_SUCCESS\"\r\n                });\r\n                dispatch({\r\n                    type: \"AUTH_USER_SUCCESS\",\r\n                    token: response.token\r\n                });\r\n                dispatch({\r\n                    type: \"GET_USER_SUCCESS\",\r\n                    payload: response.responseBody\r\n                });\r\n\r\n                return response;\r\n            } else {\r\n                throw response;\r\n            }\r\n        } catch (error) {\r\n            dispatch({\r\n                type: \"CREATE_USER_FAIL\",\r\n                payload: error.responseBody\r\n            });\r\n            return error;\r\n\r\n        }\r\n    }\r\n}\r\n\r\n/** 로그인 동작을 서버와 통신 */\r\nexport const loginUser = (payload) => {\r\n    return async (dispatch) => {\r\n        try {\r\n            dispatch({\r\n                type: \"LOGIN_USER_LOADING\"\r\n            });\r\n            const response = await fetchApi(\"/user/login\", \"POST\", payload, 200);\r\n\r\n            if (response.success) {\r\n                dispatch({\r\n                    type: \"LOGIN_USER_SUCCESS\"\r\n                });\r\n                dispatch({\r\n                    type: \"AUTH_USER_SUCCESS\",\r\n                    token: response.token\r\n                });\r\n                dispatch({\r\n                    type: \"GET_USER_SUCCESS\",\r\n                    payload: response.responseBody\r\n                });\r\n                return response;\r\n            } else {\r\n                throw response;\r\n            }\r\n        } catch (error) {\r\n            dispatch({\r\n                type: \"LOGIN_USER_FAIL\",\r\n                payload: error.responseBody\r\n            });\r\n            return error;\r\n        }\r\n    }\r\n}\r\n\r\n/** 로그아웃 동작을 서버와 통신 */\r\nexport const logoutUser = () => {\r\n    return async (dispatch, getState) => {\r\n        const state = getState();\r\n        try {\r\n            const { authReducer: { authData: { token } } } = state;\r\n            //console.log(token);\r\n            const response = await fetchApi(\"/user/logout\", \"DELETE\", null, 200, token);\r\n\r\n            console.log(response);\r\n\r\n            dispatch({\r\n                type: \"USER_LOGGED_OUT_SUCCESS\"\r\n            });\r\n\r\n        } catch (e) {\r\n            console.log(e);\r\n        }\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}